var searchIndex = {};
searchIndex['bgfx'] = {"items":[[0,"","bgfx","",null,null],[3,"StateFlags","","",null,null],[3,"BufferFlags","","",null,null],[3,"ClearFlags","","",null,null],[3,"DebugFlags","","",null,null],[3,"ResetFlags","","",null,null],[3,"Memory","","A BGFX-managed buffer of memory.",null,null],[3,"Program","","Shader program.",null,null],[3,"Shader","","Shader.",null,null],[3,"IndexBuffer","","Vertex index buffer.",null,null],[3,"VertexBuffer","","Vertex data buffer.",null,null],[3,"VertexDecl","","Describes the structure of a vertex.",null,null],[3,"VertexDeclBuilder","","Builder for `VertexDecl` instances.",null,null],[3,"Bgfx","","BGFX object.",null,null],[3,"PlatformData","","Platform data.",null,null],[4,"RendererType","","Renderer backend type.",null,null],[13,"Null","","No rendering.",0,null],[13,"Direct3D9","","Direct3D 9.0.",0,null],[13,"Direct3D11","","Direct3D 11.0.",0,null],[13,"Direct3D12","","Direct3D 12.0.",0,null],[13,"Metal","","Metal.",0,null],[13,"OpenGLES","","OpenGLES.",0,null],[13,"OpenGL","","OpenGL.",0,null],[13,"Vulkan","","Vulkan.",0,null],[13,"Default","","Use the most platform appropriate renderer.",0,null],[4,"RenderFrame","","`render_frame()` results.",null,null],[13,"NoContext","","No context is available. This usually means the main thread has exited.",1,null],[13,"Render","","The render was performed.",1,null],[13,"Exiting","","The renderer is exiting.",1,null],[4,"Attrib","","Vertex attribute.",null,null],[13,"Position","","Position.",2,null],[13,"Normal","","Normal.",2,null],[13,"Tangent","","Tangent.",2,null],[13,"Bitangent","","Bitangent.",2,null],[13,"Color0","","Color 0.",2,null],[13,"Color1","","Color 1.",2,null],[13,"Indices","","Index list.",2,null],[13,"Weight","","Bone weight.",2,null],[13,"TexCoord0","","Texture coordinate 0.",2,null],[13,"TexCoord1","","Texture coordinate 1.",2,null],[13,"TexCoord2","","Texture coordinate 2.",2,null],[13,"TexCoord3","","Texture coordinate 3.",2,null],[13,"TexCoord4","","Texture coordinate 4.",2,null],[13,"TexCoord5","","Texture coordinate 5.",2,null],[13,"TexCoord6","","Texture coordinate 6.",2,null],[13,"TexCoord7","","Texture coordinate 7.",2,null],[4,"AttribType","","Vertex attribute type.",null,null],[13,"Uint8","","Unsigned 8-bit integer.",3,null],[13,"Int8","","Signed 8-bit integer.",3,null],[13,"Uint10","","Unsigned 10-bit integer.",3,null],[13,"Int10","","Signed 10-bit integer.",3,null],[13,"Uint16","","Unsigned 16-bit integer.",3,null],[13,"Int16","","Signed 16-bit integer.",3,null],[13,"Half","","16-bit float.",3,null],[13,"Float","","32-bit float.",3,null],[4,"BgfxError","","BGFX error.",null,null],[13,"InvalidDisplay","","An invalid display was provided in the platform data.",4,null],[13,"InvalidWindow","","An invalid window was provided in the platform data.",4,null],[13,"InitFailed","","Initialization failed.",4,null],[5,"STATE_ALPHA_REF","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"stateflags"}}],[5,"STATE_POINT_SIZE","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"stateflags"}}],[5,"STATE_BLEND_FUNC_SEPARATE","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u8"},{"name":"u8"}],"output":{"name":"stateflags"}}],[5,"STATE_BLEND_EQUATION_SEPARATE","","",null,{"inputs":[{"name":"u32"},{"name":"u8"}],"output":{"name":"stateflags"}}],[5,"STATE_BLEND_FUNC","","",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"stateflags"}}],[5,"STATE_BLEND_EQUATION","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"stateflags"}}],[5,"STATE_BLEND_FUNC_RT_x","","",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"stateflags"}}],[5,"STATE_BLEND_FUNC_RT_xE","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u64"}],"output":{"name":"stateflags"}}],[5,"STATE_BLEND_FUNC_RT_1","","",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"stateflags"}}],[5,"STATE_BLEND_FUNC_RT_2","","",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"stateflags"}}],[5,"STATE_BLEND_FUNC_RT_3","","",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"stateflags"}}],[5,"STATE_BLEND_FUNC_RT_1E","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u64"}],"output":{"name":"stateflags"}}],[5,"STATE_BLEND_FUNC_RT_2E","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u64"}],"output":{"name":"stateflags"}}],[5,"STATE_BLEND_FUNC_RT_3E","","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u64"}],"output":{"name":"stateflags"}}],[5,"render_frame","","Pump the render thread.",null,{"inputs":[],"output":{"name":"renderframe"}}],[5,"init","","Initializes BGFX.",null,{"inputs":[{"name":"renderertype"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"hash","","",5,null],[11,"cmp","","",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"eq","","",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"stateflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",5,{"inputs":[{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"all","","Returns the set containing all flags.",5,{"inputs":[{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",5,{"inputs":[{"name":"stateflags"}],"output":{"name":"u64"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",5,{"inputs":[{"name":"stateflags"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",5,{"inputs":[{"name":"stateflags"},{"name":"u64"}],"output":{"name":"stateflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,{"inputs":[{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",5,{"inputs":[{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",5,{"inputs":[{"name":"stateflags"},{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"not","","Returns the complement of this set of flags.",5,{"inputs":[{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"from_iter","","",5,{"inputs":[{"name":"stateflags"},{"name":"t"}],"output":{"name":"stateflags"}}],[11,"default","","",5,{"inputs":[{"name":"stateflags"}],"output":{"name":"stateflags"}}],[11,"hash","","",6,null],[11,"cmp","","",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"eq","","",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"bufferflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",6,{"inputs":[{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"all","","Returns the set containing all flags.",6,{"inputs":[{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",6,{"inputs":[{"name":"bufferflags"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",6,{"inputs":[{"name":"bufferflags"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",6,{"inputs":[{"name":"bufferflags"},{"name":"u16"}],"output":{"name":"bufferflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",6,{"inputs":[{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",6,{"inputs":[{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",6,{"inputs":[{"name":"bufferflags"},{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"not","","Returns the complement of this set of flags.",6,{"inputs":[{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"from_iter","","",6,{"inputs":[{"name":"bufferflags"},{"name":"t"}],"output":{"name":"bufferflags"}}],[11,"default","","",6,{"inputs":[{"name":"bufferflags"}],"output":{"name":"bufferflags"}}],[11,"hash","","",7,null],[11,"cmp","","",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"clearflags"}],"output":{"name":"clearflags"}}],[11,"eq","","",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"clearflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",7,{"inputs":[{"name":"clearflags"}],"output":{"name":"clearflags"}}],[11,"all","","Returns the set containing all flags.",7,{"inputs":[{"name":"clearflags"}],"output":{"name":"clearflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",7,{"inputs":[{"name":"clearflags"}],"output":{"name":"u16"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",7,{"inputs":[{"name":"clearflags"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",7,{"inputs":[{"name":"clearflags"},{"name":"u16"}],"output":{"name":"clearflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",7,{"inputs":[{"name":"clearflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",7,{"inputs":[{"name":"clearflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"clearflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"clearflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"clearflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",7,{"inputs":[{"name":"clearflags"},{"name":"clearflags"}],"output":{"name":"clearflags"}}],[11,"not","","Returns the complement of this set of flags.",7,{"inputs":[{"name":"clearflags"}],"output":{"name":"clearflags"}}],[11,"from_iter","","",7,{"inputs":[{"name":"clearflags"},{"name":"t"}],"output":{"name":"clearflags"}}],[11,"default","","",7,{"inputs":[{"name":"clearflags"}],"output":{"name":"clearflags"}}],[11,"hash","","",8,null],[11,"cmp","","",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"eq","","",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"debugflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",8,{"inputs":[{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"all","","Returns the set containing all flags.",8,{"inputs":[{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",8,{"inputs":[{"name":"debugflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",8,{"inputs":[{"name":"debugflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",8,{"inputs":[{"name":"debugflags"},{"name":"u32"}],"output":{"name":"debugflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",8,{"inputs":[{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",8,{"inputs":[{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",8,{"inputs":[{"name":"debugflags"},{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"not","","Returns the complement of this set of flags.",8,{"inputs":[{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"from_iter","","",8,{"inputs":[{"name":"debugflags"},{"name":"t"}],"output":{"name":"debugflags"}}],[11,"default","","",8,{"inputs":[{"name":"debugflags"}],"output":{"name":"debugflags"}}],[11,"hash","","",9,null],[11,"cmp","","",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"resetflags"}],"output":{"name":"resetflags"}}],[11,"eq","","",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"resetflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",9,{"inputs":[{"name":"resetflags"}],"output":{"name":"resetflags"}}],[11,"all","","Returns the set containing all flags.",9,{"inputs":[{"name":"resetflags"}],"output":{"name":"resetflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",9,{"inputs":[{"name":"resetflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",9,{"inputs":[{"name":"resetflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",9,{"inputs":[{"name":"resetflags"},{"name":"u32"}],"output":{"name":"resetflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",9,{"inputs":[{"name":"resetflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",9,{"inputs":[{"name":"resetflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"resetflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"resetflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"resetflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",9,{"inputs":[{"name":"resetflags"},{"name":"resetflags"}],"output":{"name":"resetflags"}}],[11,"not","","Returns the complement of this set of flags.",9,{"inputs":[{"name":"resetflags"}],"output":{"name":"resetflags"}}],[11,"from_iter","","",9,{"inputs":[{"name":"resetflags"},{"name":"t"}],"output":{"name":"resetflags"}}],[11,"default","","",9,{"inputs":[{"name":"resetflags"}],"output":{"name":"resetflags"}}],[17,"STATE_RGB_WRITE","","",null,null],[17,"STATE_ALPHA_WRITE","","",null,null],[17,"STATE_DEPTH_WRITE","","",null,null],[17,"STATE_DEPTH_TEST_LESS","","",null,null],[17,"STATE_DEPTH_TEST_LEQUAL","","",null,null],[17,"STATE_DEPTH_TEST_EQUAL","","",null,null],[17,"STATE_DEPTH_TEST_GEQUAL","","",null,null],[17,"STATE_DEPTH_TEST_GREATER","","",null,null],[17,"STATE_DEPTH_TEST_NOTEQUAL","","",null,null],[17,"STATE_DEPTH_TEST_NEVER","","",null,null],[17,"STATE_DEPTH_TEST_ALWAYS","","",null,null],[17,"STATE_DEPTH_TEST_SHIFT","","",null,null],[17,"STATE_DEPTH_TEST_MASK","","",null,null],[17,"STATE_BLEND_ZERO","","",null,null],[17,"STATE_BLEND_ONE","","",null,null],[17,"STATE_BLEND_SRC_COLOR","","",null,null],[17,"STATE_BLEND_INV_SRC_COLOR","","",null,null],[17,"STATE_BLEND_SRC_ALPHA","","",null,null],[17,"STATE_BLEND_INV_SRC_ALPHA","","",null,null],[17,"STATE_BLEND_DST_ALPHA","","",null,null],[17,"STATE_BLEND_INV_DST_ALPHA","","",null,null],[17,"STATE_BLEND_DST_COLOR","","",null,null],[17,"STATE_BLEND_INV_DST_COLOR","","",null,null],[17,"STATE_BLEND_SRC_ALPHA_SAT","","",null,null],[17,"STATE_BLEND_FACTOR","","",null,null],[17,"STATE_BLEND_INV_FACTOR","","",null,null],[17,"STATE_BLEND_SHIFT","","",null,null],[17,"STATE_BLEND_MASK","","",null,null],[17,"STATE_BLEND_EQUATION_ADD","","",null,null],[17,"STATE_BLEND_EQUATION_SUB","","",null,null],[17,"STATE_BLEND_EQUATION_REVSUB","","",null,null],[17,"STATE_BLEND_EQUATION_MIN","","",null,null],[17,"STATE_BLEND_EQUATION_MAX","","",null,null],[17,"STATE_BLEND_EQUATION_SHIFT","","",null,null],[17,"STATE_BLEND_EQUATION_MASK","","",null,null],[17,"STATE_BLEND_INDEPENDENT","","",null,null],[17,"STATE_CULL_CW","","",null,null],[17,"STATE_CULL_CCW","","",null,null],[17,"STATE_CULL_SHIFT","","",null,null],[17,"STATE_CULL_MASK","","",null,null],[17,"STATE_ALPHA_REF_SHIFT","","",null,null],[17,"STATE_ALPHA_REF_MASK","","",null,null],[17,"STATE_PT_TRISTRIP","","",null,null],[17,"STATE_PT_LINES","","",null,null],[17,"STATE_PT_LINESTRIP","","",null,null],[17,"STATE_PT_POINTS","","",null,null],[17,"STATE_PT_SHIFT","","",null,null],[17,"STATE_PT_MASK","","",null,null],[17,"STATE_POINT_SIZE_SHIFT","","",null,null],[17,"STATE_POINT_SIZE_MASK","","",null,null],[17,"STATE_MSAA","","",null,null],[17,"STATE_RESERVED_MASK","","",null,null],[17,"STATE_NONE","","",null,null],[17,"STATE_MASK","","",null,null],[17,"STATE_DEFAULT","","",null,null],[17,"STATE_BLEND_ADD","","",null,null],[17,"STATE_BLEND_ALPHA","","",null,null],[17,"STATE_BLEND_DARKEN","","",null,null],[17,"STATE_BLEND_LIGHTEN","","",null,null],[17,"STATE_BLEND_MULTIPLY","","",null,null],[17,"STATE_BLEND_NORMAL","","",null,null],[17,"STATE_BLEND_SCREEN","","",null,null],[17,"STATE_BLEND_LINEAR_BURN","","",null,null],[17,"BUFFER_NONE","","",null,null],[17,"BUFFER_COMPUTE_FORMAT_8X1","","",null,null],[17,"BUFFER_COMPUTE_FORMAT_8X2","","",null,null],[17,"BUFFER_COMPUTE_FORMAT_8X4","","",null,null],[17,"BUFFER_COMPUTE_FORMAT_16X1","","",null,null],[17,"BUFFER_COMPUTE_FORMAT_16X2","","",null,null],[17,"BUFFER_COMPUTE_FORMAT_16X4","","",null,null],[17,"BUFFER_COMPUTE_FORMAT_32X1","","",null,null],[17,"BUFFER_COMPUTE_FORMAT_32X2","","",null,null],[17,"BUFFER_COMPUTE_FORMAT_32X4","","",null,null],[17,"BUFFER_COMPUTE_FORMAT_SHIFT","","",null,null],[17,"BUFFER_COMPUTE_FORMAT_MASK","","",null,null],[17,"BUFFER_COMPUTE_TYPE_UINT","","",null,null],[17,"BUFFER_COMPUTE_TYPE_INT","","",null,null],[17,"BUFFER_COMPUTE_TYPE_FLOAT","","",null,null],[17,"BUFFER_COMPUTE_TYPE_SHIFT","","",null,null],[17,"BUFFER_COMPUTE_TYPE_MASK","","",null,null],[17,"BUFFER_COMPUTE_READ","","",null,null],[17,"BUFFER_COMPUTE_WRITE","","",null,null],[17,"BUFFER_DRAW_INDIRECT","","",null,null],[17,"BUFFER_ALLOW_RESIZE","","",null,null],[17,"BUFFER_INDEX32","","",null,null],[17,"BUFFER_COMPUTE_READ_WRITE","","",null,null],[17,"CLEAR_NONE","","",null,null],[17,"CLEAR_COLOR","","",null,null],[17,"CLEAR_DEPTH","","",null,null],[17,"CLEAR_STENCIL","","",null,null],[17,"CLEAR_DISCARD_COLOR_0","","",null,null],[17,"CLEAR_DISCARD_COLOR_1","","",null,null],[17,"CLEAR_DISCARD_COLOR_2","","",null,null],[17,"CLEAR_DISCARD_COLOR_3","","",null,null],[17,"CLEAR_DISCARD_COLOR_4","","",null,null],[17,"CLEAR_DISCARD_COLOR_5","","",null,null],[17,"CLEAR_DISCARD_COLOR_6","","",null,null],[17,"CLEAR_DISCARD_COLOR_7","","",null,null],[17,"CLEAR_DISCARD_DEPTH","","",null,null],[17,"CLEAR_DISCARD_STENCIL","","",null,null],[17,"CLEAR_DISCARD_COLOR_MASK","","",null,null],[17,"CLEAR_DISCARD_MASK","","",null,null],[17,"DEBUG_NONE","","",null,null],[17,"DEBUG_WIREFRAME","","",null,null],[17,"DEBUG_IFH","","",null,null],[17,"DEBUG_STATS","","",null,null],[17,"DEBUG_TEXT","","",null,null],[17,"RESET_NONE","","",null,null],[17,"RESET_FULLSCREEN","","",null,null],[17,"RESET_FULLSCREEN_SHIFT","","",null,null],[17,"RESET_FULLSCREEN_MASK","","",null,null],[17,"RESET_MSAA_X2","","",null,null],[17,"RESET_MSAA_X4","","",null,null],[17,"RESET_MSAA_X8","","",null,null],[17,"RESET_MSAA_X16","","",null,null],[17,"RESET_MSAA_SHIFT","","",null,null],[17,"RESET_MSAA_MASK","","",null,null],[17,"RESET_VSYNC","","",null,null],[17,"RESET_MAXANISOTROPY","","",null,null],[17,"RESET_CAPTURE","","",null,null],[17,"RESET_HMD","","",null,null],[17,"RESET_HMD_DEBUG","","",null,null],[17,"RESET_HMD_RECENTER","","",null,null],[17,"RESET_FLUSH_AFTER_RENDER","","",null,null],[17,"RESET_FLIP_AFTER_RENDER","","",null,null],[17,"RESET_SRGB_BACKBUFFER","","",null,null],[17,"RESET_HIDPI","","",null,null],[17,"PCI_ID_NONE","","Autoselect adapter.",null,null],[17,"PCI_ID_SOFTWARE_RASTERIZER","","Software rasterizer.",null,null],[17,"PCI_ID_AMD","","AMD adapter.",null,null],[17,"PCI_ID_INTEL","","Intel adapter.",null,null],[17,"PCI_ID_NVIDIA","","nVidia adapter.",null,null],[11,"clone","","",0,{"inputs":[{"name":"renderertype"}],"output":{"name":"renderertype"}}],[11,"fmt","","",0,{"inputs":[{"name":"renderertype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"renderertype"},{"name":"renderertype"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"renderertype"},{"name":"renderertype"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"renderframe"}],"output":{"name":"renderframe"}}],[11,"fmt","","",1,{"inputs":[{"name":"renderframe"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"renderframe"},{"name":"renderframe"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"renderframe"},{"name":"renderframe"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"attrib"}],"output":{"name":"attrib"}}],[11,"fmt","","",2,{"inputs":[{"name":"attrib"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"attrib"},{"name":"attrib"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"attrib"},{"name":"attrib"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"attribtype"}],"output":{"name":"attribtype"}}],[11,"fmt","","",3,{"inputs":[{"name":"attribtype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"attribtype"},{"name":"attribtype"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"attribtype"},{"name":"attribtype"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"bgfxerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"copy","","Copies the source data into a new BGFX-managed buffer.",10,null],[11,"reference","","Creates a reference to the source data for passing into BGFX. When using this constructor\nover the `copy` call, no copy will be created. BGFX will read the source memory directly.",10,null],[11,"new","","Creates a new program from a vertex shader and a fragment shader. Ownerships of the shaders\nare moved to the program.",11,{"inputs":[{"name":"program"},{"name":"shader"},{"name":"shader"}],"output":{"name":"program"}}],[11,"drop","","",11,{"inputs":[{"name":"program"}],"output":null}],[11,"new","","Creates a new shader from BGFX-managed memory.",12,{"inputs":[{"name":"shader"},{"name":"memory"}],"output":{"name":"shader"}}],[11,"drop","","",12,{"inputs":[{"name":"shader"}],"output":null}],[11,"new","","Creates a new index buffer from BGFX-managed memory.",13,{"inputs":[{"name":"indexbuffer"},{"name":"memory"},{"name":"bufferflags"}],"output":{"name":"indexbuffer"}}],[11,"drop","","",13,{"inputs":[{"name":"indexbuffer"}],"output":null}],[11,"new","","Creates a new vertex buffer from BGFX-managed memory.",14,{"inputs":[{"name":"vertexbuffer"},{"name":"memory"},{"name":"vertexdecl"},{"name":"bufferflags"}],"output":{"name":"vertexbuffer"}}],[11,"drop","","",14,{"inputs":[{"name":"vertexbuffer"}],"output":null}],[11,"new","","Creates a new vertex declaration using a `VertexDeclBuilder`.",15,{"inputs":[{"name":"vertexdecl"},{"name":"option"}],"output":{"name":"vertexdeclbuilder"}}],[11,"add","","Adds a field to the structure descriptor. See `VertexDecl::new()` for an example.",16,{"inputs":[{"name":"vertexdeclbuilder"},{"name":"attrib"},{"name":"u8"},{"name":"attribtype"}],"output":{"name":"self"}}],[11,"skip","","Indicates a gap in the vertex structure.",16,{"inputs":[{"name":"vertexdeclbuilder"},{"name":"u8"}],"output":{"name":"self"}}],[11,"end","","Finalizes the construction of the `VertexDecl`.",16,{"inputs":[{"name":"vertexdeclbuilder"}],"output":{"name":"vertexdecl"}}],[11,"reset","","Resets the graphics device to the given size.",17,{"inputs":[{"name":"bgfx"},{"name":"u16"},{"name":"u16"},{"name":"resetflags"}],"output":null}],[11,"set_debug","","Sets the debug flags in use.",17,{"inputs":[{"name":"bgfx"},{"name":"debugflags"}],"output":null}],[11,"set_view_clear","","Sets the options to use when clearing the given view.",17,{"inputs":[{"name":"bgfx"},{"name":"u8"},{"name":"clearflags"},{"name":"u32"},{"name":"f32"},{"name":"u8"}],"output":null}],[11,"set_view_rect","","Sets the rectangle to display the given view in.",17,{"inputs":[{"name":"bgfx"},{"name":"u8"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":null}],[11,"set_view_transform","","",17,null],[11,"touch","","Touch a view. ( ͡° ͜ʖ ͡°)",17,{"inputs":[{"name":"bgfx"},{"name":"u8"}],"output":null}],[11,"dbg_text_clear","","Clears debug text.",17,{"inputs":[{"name":"bgfx"},{"name":"option"},{"name":"option"}],"output":null}],[11,"dbg_text_image","","Draws an image to the debug text overlay.",17,null],[11,"dbg_text_print","","Displays text in the debug text overlay.",17,{"inputs":[{"name":"bgfx"},{"name":"u16"},{"name":"u16"},{"name":"u8"},{"name":"str"}],"output":null}],[11,"frame","","Finish the frame, syncing up with the render thread. Returns an incrementing frame counter.",17,{"inputs":[{"name":"bgfx"}],"output":{"name":"u32"}}],[11,"set_transform","","Sets the transform for rendering.",17,null],[11,"set_vertex_buffer","","Sets the vertex buffer for rendering.",17,{"inputs":[{"name":"bgfx"},{"name":"vertexbuffer"}],"output":null}],[11,"set_index_buffer","","Sets the index buffer for rendering.",17,{"inputs":[{"name":"bgfx"},{"name":"indexbuffer"}],"output":null}],[11,"set_state","","Sets the render state.",17,{"inputs":[{"name":"bgfx"},{"name":"stateflags"},{"name":"option"}],"output":null}],[11,"submit","","Submit a primitive for rendering. Returns the number of draw calls.",17,{"inputs":[{"name":"bgfx"},{"name":"u8"},{"name":"program"}],"output":{"name":"u32"}}],[11,"get_renderer_type","","Gets the type of the renderer in use.",17,{"inputs":[{"name":"bgfx"}],"output":{"name":"renderertype"}}],[11,"drop","","",17,{"inputs":[{"name":"bgfx"}],"output":null}],[11,"new","","Creates an empty PlatformData instance.",18,{"inputs":[{"name":"platformdata"}],"output":{"name":"platformdata"}}],[11,"context","","Sets the GL context to use.",18,null],[11,"display","","Sets the X11 display to use on unix systems.",18,null],[11,"window","","Sets the handle to the window to use.",18,null],[11,"apply","","Apply the platform configuration.",18,{"inputs":[{"name":"platformdata"}],"output":{"name":"result"}}]],"paths":[[4,"RendererType"],[4,"RenderFrame"],[4,"Attrib"],[4,"AttribType"],[4,"BgfxError"],[3,"StateFlags"],[3,"BufferFlags"],[3,"ClearFlags"],[3,"DebugFlags"],[3,"ResetFlags"],[3,"Memory"],[3,"Program"],[3,"Shader"],[3,"IndexBuffer"],[3,"VertexBuffer"],[3,"VertexDecl"],[3,"VertexDeclBuilder"],[3,"Bgfx"],[3,"PlatformData"]]};
searchIndex['bgfx_sys'] = {"items":[[0,"","bgfx_sys","",null,null],[3,"Struct_bgfx_indirect_buffer_handle","","",null,null],[12,"idx","","",0,null],[3,"Struct_bgfx_dynamic_index_buffer_handle","","",null,null],[12,"idx","","",1,null],[3,"Struct_bgfx_dynamic_vertex_buffer_handle","","",null,null],[12,"idx","","",2,null],[3,"Struct_bgfx_frame_buffer_handle","","",null,null],[12,"idx","","",3,null],[3,"Struct_bgfx_index_buffer_handle","","",null,null],[12,"idx","","",4,null],[3,"Struct_bgfx_occlusion_query_handle","","",null,null],[12,"idx","","",5,null],[3,"Struct_bgfx_program_handle","","",null,null],[12,"idx","","",6,null],[3,"Struct_bgfx_shader_handle","","",null,null],[12,"idx","","",7,null],[3,"Struct_bgfx_texture_handle","","",null,null],[12,"idx","","",8,null],[3,"Struct_bgfx_uniform_handle","","",null,null],[12,"idx","","",9,null],[3,"Struct_bgfx_vertex_buffer_handle","","",null,null],[12,"idx","","",10,null],[3,"Struct_bgfx_vertex_decl_handle","","",null,null],[12,"idx","","",11,null],[3,"Struct_bgfx_memory","","",null,null],[12,"data","","",12,null],[12,"size","","",12,null],[3,"Struct_bgfx_transform","","",null,null],[12,"data","","",13,null],[12,"num","","",13,null],[3,"Struct_bgfx_hmd_eye","","",null,null],[12,"rotation","","",14,null],[12,"translation","","",14,null],[12,"fov","","",14,null],[12,"adjust","","",14,null],[12,"pixelsPerTanAngle","","",14,null],[3,"Struct_bgfx_hmd","","",null,null],[12,"eye","","",15,null],[12,"width","","",15,null],[12,"height","","",15,null],[12,"deviceWidth","","",15,null],[12,"deviceHeight","","",15,null],[12,"flags","","",15,null],[3,"Struct_bgfx_stats","","",null,null],[12,"cpuTime","","",16,null],[12,"cpuTimerFreq","","",16,null],[12,"gpuTime","","",16,null],[12,"gpuTimerFreq","","",16,null],[3,"Struct_bgfx_vertex_decl","","",null,null],[12,"hash","","",17,null],[12,"stride","","",17,null],[12,"offset","","",17,null],[12,"attributes","","",17,null],[3,"Struct_bgfx_transient_index_buffer","","",null,null],[12,"data","","",18,null],[12,"size","","",18,null],[12,"handle","","",18,null],[12,"startIndex","","",18,null],[3,"Struct_bgfx_transient_vertex_buffer","","",null,null],[12,"data","","",19,null],[12,"size","","",19,null],[12,"startVertex","","",19,null],[12,"stride","","",19,null],[12,"handle","","",19,null],[12,"decl","","",19,null],[3,"Struct_bgfx_instance_data_buffer","","",null,null],[12,"data","","",20,null],[12,"size","","",20,null],[12,"offset","","",20,null],[12,"num","","",20,null],[12,"stride","","",20,null],[12,"handle","","",20,null],[3,"Struct_bgfx_texture_info","","",null,null],[12,"format","","",21,null],[12,"storageSize","","",21,null],[12,"width","","",21,null],[12,"height","","",21,null],[12,"depth","","",21,null],[12,"numMips","","",21,null],[12,"bitsPerPixel","","",21,null],[12,"cubeMap","","",21,null],[3,"Struct_bgfx_caps_gpu","","",null,null],[12,"vendorId","","",22,null],[12,"deviceId","","",22,null],[3,"Struct_bgfx_caps","","",null,null],[12,"rendererType","","",23,null],[12,"supported","","",23,null],[12,"maxDrawCalls","","",23,null],[12,"maxTextureSize","","",23,null],[12,"maxViews","","",23,null],[12,"maxFBAttachments","","",23,null],[12,"numGPUs","","",23,null],[12,"vendorId","","",23,null],[12,"deviceId","","",23,null],[12,"gpu","","",23,null],[12,"formats","","",23,null],[3,"Struct_bgfx_callback_interface","","",null,null],[12,"vtbl","","",24,null],[3,"Struct_bgfx_callback_vtbl","","",null,null],[12,"fatal","","",25,null],[12,"trace_vargs","","",25,null],[12,"cache_read_size","","",25,null],[12,"cache_read","","",25,null],[12,"cache_write","","",25,null],[12,"screen_shot","","",25,null],[12,"capture_begin","","",25,null],[12,"capture_end","","",25,null],[12,"capture_frame","","",25,null],[3,"Struct_bgfx_allocator_interface","","",null,null],[12,"vtbl","","",26,null],[3,"Struct_bgfx_allocator_vtbl","","",null,null],[12,"realloc","","",27,null],[3,"Struct_bgfx_interface_vtbl","","",null,null],[12,"render_frame","","",28,null],[12,"set_platform_data","","",28,null],[12,"vertex_decl_begin","","",28,null],[12,"vertex_decl_add","","",28,null],[12,"vertex_decl_skip","","",28,null],[12,"vertex_decl_end","","",28,null],[12,"vertex_pack","","",28,null],[12,"vertex_unpack","","",28,null],[12,"vertex_convert","","",28,null],[12,"weld_vertices","","",28,null],[12,"image_swizzle_bgra8","","",28,null],[12,"image_rgba8_downsample_2x2","","",28,null],[12,"get_supported_renderers","","",28,null],[12,"get_renderer_name","","",28,null],[12,"init","","",28,null],[12,"shutdown","","",28,null],[12,"reset","","",28,null],[12,"frame","","",28,null],[12,"get_renderer_type","","",28,null],[12,"get_caps","","",28,null],[12,"get_hmd","","",28,null],[12,"get_stats","","",28,null],[12,"alloc","","",28,null],[12,"copy","","",28,null],[12,"make_ref","","",28,null],[12,"make_ref_release","","",28,null],[12,"set_debug","","",28,null],[12,"dbg_text_clear","","",28,null],[12,"dbg_text_printf","","",28,null],[12,"dbg_text_image","","",28,null],[12,"create_index_buffer","","",28,null],[12,"destroy_index_buffer","","",28,null],[12,"create_vertex_buffer","","",28,null],[12,"destroy_vertex_buffer","","",28,null],[12,"create_dynamic_index_buffer","","",28,null],[12,"create_dynamic_index_buffer_mem","","",28,null],[12,"update_dynamic_index_buffer","","",28,null],[12,"destroy_dynamic_index_buffer","","",28,null],[12,"create_dynamic_vertex_buffer","","",28,null],[12,"create_dynamic_vertex_buffer_mem","","",28,null],[12,"update_dynamic_vertex_buffer","","",28,null],[12,"destroy_dynamic_vertex_buffer","","",28,null],[12,"check_avail_transient_index_buffer","","",28,null],[12,"check_avail_transient_vertex_buffer","","",28,null],[12,"check_avail_instance_data_buffer","","",28,null],[12,"check_avail_transient_buffers","","",28,null],[12,"alloc_transient_index_buffer","","",28,null],[12,"alloc_transient_vertex_buffer","","",28,null],[12,"alloc_transient_buffers","","",28,null],[12,"alloc_instance_data_buffer","","",28,null],[12,"create_indirect_buffer","","",28,null],[12,"destroy_indirect_buffer","","",28,null],[12,"create_shader","","",28,null],[12,"get_shader_uniforms","","",28,null],[12,"destroy_shader","","",28,null],[12,"create_program","","",28,null],[12,"create_compute_program","","",28,null],[12,"destroy_program","","",28,null],[12,"calc_texture_size","","",28,null],[12,"create_texture","","",28,null],[12,"create_texture_2d","","",28,null],[12,"create_texture_2d_scaled","","",28,null],[12,"create_texture_3d","","",28,null],[12,"create_texture_cube","","",28,null],[12,"update_texture_2d","","",28,null],[12,"update_texture_3d","","",28,null],[12,"update_texture_cube","","",28,null],[12,"destroy_texture","","",28,null],[12,"create_frame_buffer","","",28,null],[12,"create_frame_buffer_scaled","","",28,null],[12,"create_frame_buffer_from_handles","","",28,null],[12,"create_frame_buffer_from_nwh","","",28,null],[12,"destroy_frame_buffer","","",28,null],[12,"create_uniform","","",28,null],[12,"destroy_uniform","","",28,null],[12,"create_occlusion_query","","",28,null],[12,"get_result","","",28,null],[12,"destroy_occlusion_query","","",28,null],[12,"set_palette_color","","",28,null],[12,"set_view_name","","",28,null],[12,"set_view_rect","","",28,null],[12,"set_view_scissor","","",28,null],[12,"set_view_clear","","",28,null],[12,"set_view_clear_mrt","","",28,null],[12,"set_view_seq","","",28,null],[12,"set_view_frame_buffer","","",28,null],[12,"set_view_transform","","",28,null],[12,"set_view_transform_stereo","","",28,null],[12,"set_view_remap","","",28,null],[12,"set_marker","","",28,null],[12,"set_state","","",28,null],[12,"set_condition","","",28,null],[12,"set_stencil","","",28,null],[12,"set_scissor","","",28,null],[12,"set_scissor_cached","","",28,null],[12,"set_transform","","",28,null],[12,"alloc_transform","","",28,null],[12,"set_transform_cached","","",28,null],[12,"set_uniform","","",28,null],[12,"set_index_buffer","","",28,null],[12,"set_dynamic_index_buffer","","",28,null],[12,"set_transient_index_buffer","","",28,null],[12,"set_vertex_buffer","","",28,null],[12,"set_dynamic_vertex_buffer","","",28,null],[12,"set_transient_vertex_buffer","","",28,null],[12,"set_instance_data_buffer","","",28,null],[12,"set_instance_data_from_vertex_buffer","","",28,null],[12,"set_instance_data_from_dynamic_vertex_buffer","","",28,null],[12,"set_texture","","",28,null],[12,"set_texture_from_frame_buffer","","",28,null],[12,"touch","","",28,null],[12,"submit","","",28,null],[12,"submit_occlusion_query","","",28,null],[12,"submit_indirect","","",28,null],[12,"set_image","","",28,null],[12,"set_image_from_frame_buffer","","",28,null],[12,"set_compute_index_buffer","","",28,null],[12,"set_compute_vertex_buffer","","",28,null],[12,"set_compute_dynamic_index_buffer","","",28,null],[12,"set_compute_dynamic_vertex_buffer","","",28,null],[12,"set_compute_indirect_buffer","","",28,null],[12,"dispatch","","",28,null],[12,"dispatch_indirect","","",28,null],[12,"discard","","",28,null],[12,"blit","","",28,null],[12,"save_screen_shot","","",28,null],[3,"Struct_bgfx_platform_data","","",null,null],[12,"ndt","","",29,null],[12,"nwh","","",29,null],[12,"context","","",29,null],[12,"backBuffer","","",29,null],[12,"backBufferDS","","",29,null],[5,"bgfx_vertex_decl_begin","","",null,null],[5,"bgfx_vertex_decl_add","","",null,null],[5,"bgfx_vertex_decl_skip","","",null,null],[5,"bgfx_vertex_decl_end","","",null,null],[5,"bgfx_vertex_pack","","",null,null],[5,"bgfx_vertex_unpack","","",null,null],[5,"bgfx_vertex_convert","","",null,null],[5,"bgfx_weld_vertices","","",null,null],[5,"bgfx_image_swizzle_bgra8","","",null,null],[5,"bgfx_image_rgba8_downsample_2x2","","",null,null],[5,"bgfx_get_supported_renderers","","",null,null],[5,"bgfx_get_renderer_name","","",null,null],[5,"bgfx_init","","",null,null],[5,"bgfx_shutdown","","",null,null],[5,"bgfx_reset","","",null,null],[5,"bgfx_frame","","",null,null],[5,"bgfx_get_renderer_type","","",null,null],[5,"bgfx_get_caps","","",null,null],[5,"bgfx_get_hmd","","",null,null],[5,"bgfx_get_stats","","",null,null],[5,"bgfx_alloc","","",null,null],[5,"bgfx_copy","","",null,null],[5,"bgfx_make_ref","","",null,null],[5,"bgfx_make_ref_release","","",null,null],[5,"bgfx_set_debug","","",null,null],[5,"bgfx_dbg_text_clear","","",null,null],[5,"bgfx_dbg_text_printf","","",null,null],[5,"bgfx_dbg_text_image","","",null,null],[5,"bgfx_create_index_buffer","","",null,null],[5,"bgfx_destroy_index_buffer","","",null,null],[5,"bgfx_create_vertex_buffer","","",null,null],[5,"bgfx_destroy_vertex_buffer","","",null,null],[5,"bgfx_create_dynamic_index_buffer","","",null,null],[5,"bgfx_create_dynamic_index_buffer_mem","","",null,null],[5,"bgfx_update_dynamic_index_buffer","","",null,null],[5,"bgfx_destroy_dynamic_index_buffer","","",null,null],[5,"bgfx_create_dynamic_vertex_buffer","","",null,null],[5,"bgfx_create_dynamic_vertex_buffer_mem","","",null,null],[5,"bgfx_update_dynamic_vertex_buffer","","",null,null],[5,"bgfx_destroy_dynamic_vertex_buffer","","",null,null],[5,"bgfx_check_avail_transient_index_buffer","","",null,null],[5,"bgfx_check_avail_transient_vertex_buffer","","",null,null],[5,"bgfx_check_avail_instance_data_buffer","","",null,null],[5,"bgfx_check_avail_transient_buffers","","",null,null],[5,"bgfx_alloc_transient_index_buffer","","",null,null],[5,"bgfx_alloc_transient_vertex_buffer","","",null,null],[5,"bgfx_alloc_transient_buffers","","",null,null],[5,"bgfx_alloc_instance_data_buffer","","",null,null],[5,"bgfx_create_indirect_buffer","","",null,null],[5,"bgfx_destroy_indirect_buffer","","",null,null],[5,"bgfx_create_shader","","",null,null],[5,"bgfx_get_shader_uniforms","","",null,null],[5,"bgfx_destroy_shader","","",null,null],[5,"bgfx_create_program","","",null,null],[5,"bgfx_create_compute_program","","",null,null],[5,"bgfx_destroy_program","","",null,null],[5,"bgfx_calc_texture_size","","",null,null],[5,"bgfx_create_texture","","",null,null],[5,"bgfx_create_texture_2d","","",null,null],[5,"bgfx_create_texture_2d_scaled","","",null,null],[5,"bgfx_create_texture_3d","","",null,null],[5,"bgfx_create_texture_cube","","",null,null],[5,"bgfx_update_texture_2d","","",null,null],[5,"bgfx_update_texture_3d","","",null,null],[5,"bgfx_update_texture_cube","","",null,null],[5,"bgfx_read_texture","","",null,null],[5,"bgfx_read_frame_buffer","","",null,null],[5,"bgfx_destroy_texture","","",null,null],[5,"bgfx_create_frame_buffer","","",null,null],[5,"bgfx_create_frame_buffer_scaled","","",null,null],[5,"bgfx_create_frame_buffer_from_handles","","",null,null],[5,"bgfx_create_frame_buffer_from_nwh","","",null,null],[5,"bgfx_destroy_frame_buffer","","",null,null],[5,"bgfx_create_uniform","","",null,null],[5,"bgfx_destroy_uniform","","",null,null],[5,"bgfx_create_occlusion_query","","",null,null],[5,"bgfx_get_result","","",null,null],[5,"bgfx_destroy_occlusion_query","","",null,null],[5,"bgfx_set_palette_color","","",null,null],[5,"bgfx_set_view_name","","",null,null],[5,"bgfx_set_view_rect","","",null,null],[5,"bgfx_set_view_rect_auto","","",null,null],[5,"bgfx_set_view_scissor","","",null,null],[5,"bgfx_set_view_clear","","",null,null],[5,"bgfx_set_view_clear_mrt","","",null,null],[5,"bgfx_set_view_seq","","",null,null],[5,"bgfx_set_view_frame_buffer","","",null,null],[5,"bgfx_set_view_transform","","",null,null],[5,"bgfx_set_view_transform_stereo","","",null,null],[5,"bgfx_set_view_remap","","",null,null],[5,"bgfx_reset_view","","",null,null],[5,"bgfx_set_marker","","",null,null],[5,"bgfx_set_state","","",null,null],[5,"bgfx_set_condition","","",null,null],[5,"bgfx_set_stencil","","",null,null],[5,"bgfx_set_scissor","","",null,null],[5,"bgfx_set_scissor_cached","","",null,null],[5,"bgfx_set_transform","","",null,null],[5,"bgfx_alloc_transform","","",null,null],[5,"bgfx_set_transform_cached","","",null,null],[5,"bgfx_set_uniform","","",null,null],[5,"bgfx_set_index_buffer","","",null,null],[5,"bgfx_set_dynamic_index_buffer","","",null,null],[5,"bgfx_set_transient_index_buffer","","",null,null],[5,"bgfx_set_vertex_buffer","","",null,null],[5,"bgfx_set_dynamic_vertex_buffer","","",null,null],[5,"bgfx_set_transient_vertex_buffer","","",null,null],[5,"bgfx_set_instance_data_buffer","","",null,null],[5,"bgfx_set_instance_data_from_vertex_buffer","","",null,null],[5,"bgfx_set_instance_data_from_dynamic_vertex_buffer","","",null,null],[5,"bgfx_set_texture","","",null,null],[5,"bgfx_set_texture_from_frame_buffer","","",null,null],[5,"bgfx_touch","","",null,null],[5,"bgfx_submit","","",null,null],[5,"bgfx_submit_occlusion_query","","",null,null],[5,"bgfx_submit_indirect","","",null,null],[5,"bgfx_set_image","","",null,null],[5,"bgfx_set_image_from_frame_buffer","","",null,null],[5,"bgfx_set_compute_index_buffer","","",null,null],[5,"bgfx_set_compute_vertex_buffer","","",null,null],[5,"bgfx_set_compute_dynamic_index_buffer","","",null,null],[5,"bgfx_set_compute_dynamic_vertex_buffer","","",null,null],[5,"bgfx_set_compute_indirect_buffer","","",null,null],[5,"bgfx_dispatch","","",null,null],[5,"bgfx_dispatch_indirect","","",null,null],[5,"bgfx_discard","","",null,null],[5,"bgfx_blit","","",null,null],[5,"bgfx_blit_frame_buffer","","",null,null],[5,"bgfx_save_screen_shot","","",null,null],[5,"bgfx_render_frame","","",null,null],[5,"bgfx_set_platform_data","","",null,null],[6,"va_list","","",null,null],[6,"size_t","","",null,null],[6,"int32_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"Enum_bgfx_renderer_type","","",null,null],[6,"bgfx_renderer_type_t","","",null,null],[6,"Enum_bgfx_access","","",null,null],[6,"bgfx_access_t","","",null,null],[6,"Enum_bgfx_attrib","","",null,null],[6,"bgfx_attrib_t","","",null,null],[6,"Enum_bgfx_attrib_type","","",null,null],[6,"bgfx_attrib_type_t","","",null,null],[6,"Enum_bgfx_texture_format","","",null,null],[6,"bgfx_texture_format_t","","",null,null],[6,"Enum_bgfx_uniform_type","","",null,null],[6,"bgfx_uniform_type_t","","",null,null],[6,"Enum_bgfx_backbuffer_ratio","","",null,null],[6,"bgfx_backbuffer_ratio_t","","",null,null],[6,"Enum_bgfx_occlusion_query_result","","",null,null],[6,"bgfx_occlusion_query_result_t","","",null,null],[6,"bgfx_indirect_buffer_handle_t","","",null,null],[6,"bgfx_dynamic_index_buffer_handle_t","","",null,null],[6,"bgfx_dynamic_vertex_buffer_handle_t","","",null,null],[6,"bgfx_frame_buffer_handle_t","","",null,null],[6,"bgfx_index_buffer_handle_t","","",null,null],[6,"bgfx_occlusion_query_handle_t","","",null,null],[6,"bgfx_program_handle_t","","",null,null],[6,"bgfx_shader_handle_t","","",null,null],[6,"bgfx_texture_handle_t","","",null,null],[6,"bgfx_uniform_handle_t","","",null,null],[6,"bgfx_vertex_buffer_handle_t","","",null,null],[6,"bgfx_vertex_decl_handle_t","","",null,null],[6,"bgfx_release_fn_t","","",null,null],[6,"bgfx_memory_t","","",null,null],[6,"bgfx_transform_t","","",null,null],[6,"bgfx_hmd_eye_t","","",null,null],[6,"bgfx_hmd_t","","",null,null],[6,"bgfx_stats_t","","",null,null],[6,"bgfx_vertex_decl_t","","",null,null],[6,"bgfx_transient_index_buffer_t","","",null,null],[6,"bgfx_transient_vertex_buffer_t","","",null,null],[6,"bgfx_instance_data_buffer_t","","",null,null],[6,"bgfx_texture_info_t","","",null,null],[6,"bgfx_caps_gpu_t","","",null,null],[6,"bgfx_caps_t","","",null,null],[6,"Enum_bgfx_fatal","","",null,null],[6,"bgfx_fatal_t","","",null,null],[6,"bgfx_callback_interface_t","","",null,null],[6,"bgfx_callback_vtbl_t","","",null,null],[6,"bgfx_allocator_interface_t","","",null,null],[6,"bgfx_allocator_vtbl_t","","",null,null],[6,"bgfx_interface_vtbl_t","","",null,null],[6,"PFN_BGFX_GET_INTERFACE","","",null,null],[6,"Enum_bgfx_render_frame","","",null,null],[6,"bgfx_render_frame_t","","",null,null],[6,"bgfx_platform_data_t","","",null,null],[17,"BGFX_RENDERER_TYPE_NULL","","",null,null],[17,"BGFX_RENDERER_TYPE_DIRECT3D9","","",null,null],[17,"BGFX_RENDERER_TYPE_DIRECT3D11","","",null,null],[17,"BGFX_RENDERER_TYPE_DIRECT3D12","","",null,null],[17,"BGFX_RENDERER_TYPE_METAL","","",null,null],[17,"BGFX_RENDERER_TYPE_OPENGLES","","",null,null],[17,"BGFX_RENDERER_TYPE_OPENGL","","",null,null],[17,"BGFX_RENDERER_TYPE_VULKAN","","",null,null],[17,"BGFX_RENDERER_TYPE_COUNT","","",null,null],[17,"BGFX_ACCESS_READ","","",null,null],[17,"BGFX_ACCESS_WRITE","","",null,null],[17,"BGFX_ACCESS_READWRITE","","",null,null],[17,"BGFX_ACCESS_COUNT","","",null,null],[17,"BGFX_ATTRIB_POSITION","","",null,null],[17,"BGFX_ATTRIB_NORMAL","","",null,null],[17,"BGFX_ATTRIB_TANGENT","","",null,null],[17,"BGFX_ATTRIB_BITANGENT","","",null,null],[17,"BGFX_ATTRIB_COLOR0","","",null,null],[17,"BGFX_ATTRIB_COLOR1","","",null,null],[17,"BGFX_ATTRIB_INDICES","","",null,null],[17,"BGFX_ATTRIB_WEIGHT","","",null,null],[17,"BGFX_ATTRIB_TEXCOORD0","","",null,null],[17,"BGFX_ATTRIB_TEXCOORD1","","",null,null],[17,"BGFX_ATTRIB_TEXCOORD2","","",null,null],[17,"BGFX_ATTRIB_TEXCOORD3","","",null,null],[17,"BGFX_ATTRIB_TEXCOORD4","","",null,null],[17,"BGFX_ATTRIB_TEXCOORD5","","",null,null],[17,"BGFX_ATTRIB_TEXCOORD6","","",null,null],[17,"BGFX_ATTRIB_TEXCOORD7","","",null,null],[17,"BGFX_ATTRIB_COUNT","","",null,null],[17,"BGFX_ATTRIB_TYPE_UINT8","","",null,null],[17,"BGFX_ATTRIB_TYPE_UINT10","","",null,null],[17,"BGFX_ATTRIB_TYPE_INT16","","",null,null],[17,"BGFX_ATTRIB_TYPE_HALF","","",null,null],[17,"BGFX_ATTRIB_TYPE_FLOAT","","",null,null],[17,"BGFX_ATTRIB_TYPE_COUNT","","",null,null],[17,"BGFX_TEXTURE_FORMAT_BC1","","",null,null],[17,"BGFX_TEXTURE_FORMAT_BC2","","",null,null],[17,"BGFX_TEXTURE_FORMAT_BC3","","",null,null],[17,"BGFX_TEXTURE_FORMAT_BC4","","",null,null],[17,"BGFX_TEXTURE_FORMAT_BC5","","",null,null],[17,"BGFX_TEXTURE_FORMAT_BC6H","","",null,null],[17,"BGFX_TEXTURE_FORMAT_BC7","","",null,null],[17,"BGFX_TEXTURE_FORMAT_ETC1","","",null,null],[17,"BGFX_TEXTURE_FORMAT_ETC2","","",null,null],[17,"BGFX_TEXTURE_FORMAT_ETC2A","","",null,null],[17,"BGFX_TEXTURE_FORMAT_ETC2A1","","",null,null],[17,"BGFX_TEXTURE_FORMAT_PTC12","","",null,null],[17,"BGFX_TEXTURE_FORMAT_PTC14","","",null,null],[17,"BGFX_TEXTURE_FORMAT_PTC12A","","",null,null],[17,"BGFX_TEXTURE_FORMAT_PTC14A","","",null,null],[17,"BGFX_TEXTURE_FORMAT_PTC22","","",null,null],[17,"BGFX_TEXTURE_FORMAT_PTC24","","",null,null],[17,"BGFX_TEXTURE_FORMAT_UNKNOWN","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R1","","",null,null],[17,"BGFX_TEXTURE_FORMAT_A8","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R8","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R8I","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R8U","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R8S","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R16","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R16I","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R16U","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R16F","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R16S","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R32I","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R32U","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R32F","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RG8","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RG8I","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RG8U","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RG8S","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RG16","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RG16I","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RG16U","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RG16F","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RG16S","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RG32I","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RG32U","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RG32F","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGB9E5F","","",null,null],[17,"BGFX_TEXTURE_FORMAT_BGRA8","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA8","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA8I","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA8U","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA8S","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA16","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA16I","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA16U","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA16F","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA16S","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA32I","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA32U","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA32F","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R5G6B5","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGBA4","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGB5A1","","",null,null],[17,"BGFX_TEXTURE_FORMAT_RGB10A2","","",null,null],[17,"BGFX_TEXTURE_FORMAT_R11G11B10F","","",null,null],[17,"BGFX_TEXTURE_FORMAT_UNKNOWN_DEPTH","","",null,null],[17,"BGFX_TEXTURE_FORMAT_D16","","",null,null],[17,"BGFX_TEXTURE_FORMAT_D24","","",null,null],[17,"BGFX_TEXTURE_FORMAT_D24S8","","",null,null],[17,"BGFX_TEXTURE_FORMAT_D32","","",null,null],[17,"BGFX_TEXTURE_FORMAT_D16F","","",null,null],[17,"BGFX_TEXTURE_FORMAT_D24F","","",null,null],[17,"BGFX_TEXTURE_FORMAT_D32F","","",null,null],[17,"BGFX_TEXTURE_FORMAT_D0S8","","",null,null],[17,"BGFX_TEXTURE_FORMAT_COUNT","","",null,null],[17,"BGFX_UNIFORM_TYPE_INT1","","",null,null],[17,"BGFX_UNIFORM_TYPE_END","","",null,null],[17,"BGFX_UNIFORM_TYPE_VEC4","","",null,null],[17,"BGFX_UNIFORM_TYPE_MAT3","","",null,null],[17,"BGFX_UNIFORM_TYPE_MAT4","","",null,null],[17,"BGFX_UNIFORM_TYPE_COUNT","","",null,null],[17,"BGFX_BACKBUFFER_RATIO_EQUAL","","",null,null],[17,"BGFX_BACKBUFFER_RATIO_HALF","","",null,null],[17,"BGFX_BACKBUFFER_RATIO_QUARTER","","",null,null],[17,"BGFX_BACKBUFFER_RATIO_EIGHTH","","",null,null],[17,"BGFX_BACKBUFFER_RATIO_SIXTEENTH","","",null,null],[17,"BGFX_BACKBUFFER_RATIO_DOUBLE","","",null,null],[17,"BGFX_BACKBUFFER_RATIO_COUNT","","",null,null],[17,"BGFX_OCCLUSION_QUERY_RESULT_INVISIBLE","","",null,null],[17,"BGFX_OCCLUSION_QUERY_RESULT_VISIBLE","","",null,null],[17,"BGFX_OCCLUSION_QUERY_RESULT_NORESULT","","",null,null],[17,"BGFX_OCCLUSION_QUERY_RESULT_COUNT","","",null,null],[17,"BGFX_FATAL_DEBUG_CHECK","","",null,null],[17,"BGFX_FATAL_MINIMUM_REQUIRED_SPECS","","",null,null],[17,"BGFX_FATAL_INVALID_SHADER","","",null,null],[17,"BGFX_FATAL_UNABLE_TO_INITIALIZE","","",null,null],[17,"BGFX_FATAL_UNABLE_TO_CREATE_TEXTURE","","",null,null],[17,"BGFX_FATAL_DEVICE_LOST","","",null,null],[17,"BGFX_FATAL_COUNT","","",null,null],[17,"BGFX_RENDER_FRAME_NO_CONTEXT","","",null,null],[17,"BGFX_RENDER_FRAME_RENDER","","",null,null],[17,"BGFX_RENDER_FRAME_EXITING","","",null,null],[17,"BGFX_RENDER_FRAME_COUNT","","",null,null],[17,"BGFX_PCI_ID_NONE","","",null,null],[17,"BGFX_PCI_ID_SOFTWARE_RASTERIZER","","",null,null],[17,"BGFX_PCI_ID_AMD","","",null,null],[17,"BGFX_PCI_ID_INTEL","","",null,null],[17,"BGFX_PCI_ID_NVIDIA","","",null,null],[17,"BGFX_CLEAR_NONE","","",null,null],[17,"BGFX_CLEAR_COLOR","","",null,null],[17,"BGFX_CLEAR_DEPTH","","",null,null],[17,"BGFX_CLEAR_STENCIL","","",null,null],[17,"BGFX_CLEAR_DISCARD_COLOR_0","","",null,null],[17,"BGFX_CLEAR_DISCARD_COLOR_1","","",null,null],[17,"BGFX_CLEAR_DISCARD_COLOR_2","","",null,null],[17,"BGFX_CLEAR_DISCARD_COLOR_3","","",null,null],[17,"BGFX_CLEAR_DISCARD_COLOR_4","","",null,null],[17,"BGFX_CLEAR_DISCARD_COLOR_5","","",null,null],[17,"BGFX_CLEAR_DISCARD_COLOR_6","","",null,null],[17,"BGFX_CLEAR_DISCARD_COLOR_7","","",null,null],[17,"BGFX_CLEAR_DISCARD_DEPTH","","",null,null],[17,"BGFX_CLEAR_DISCARD_STENCIL","","",null,null],[17,"BGFX_CLEAR_DISCARD_COLOR_MASK","","",null,null],[17,"BGFX_CLEAR_DISCARD_MASK","","",null,null],[17,"BGFX_DEBUG_NONE","","",null,null],[17,"BGFX_DEBUG_WIREFRAME","","",null,null],[17,"BGFX_DEBUG_IFH","","",null,null],[17,"BGFX_DEBUG_STATS","","",null,null],[17,"BGFX_DEBUG_TEXT","","",null,null],[17,"BGFX_RESET_NONE","","",null,null],[17,"BGFX_RESET_FULLSCREEN","","",null,null],[17,"BGFX_RESET_FULLSCREEN_SHIFT","","",null,null],[17,"BGFX_RESET_FULLSCREEN_MASK","","",null,null],[17,"BGFX_RESET_MSAA_X2","","",null,null],[17,"BGFX_RESET_MSAA_X4","","",null,null],[17,"BGFX_RESET_MSAA_X8","","",null,null],[17,"BGFX_RESET_MSAA_X16","","",null,null],[17,"BGFX_RESET_MSAA_SHIFT","","",null,null],[17,"BGFX_RESET_MSAA_MASK","","",null,null],[17,"BGFX_RESET_VSYNC","","",null,null],[17,"BGFX_RESET_MAXANISOTROPY","","",null,null],[17,"BGFX_RESET_CAPTURE","","",null,null],[17,"BGFX_RESET_HMD","","",null,null],[17,"BGFX_RESET_HMD_DEBUG","","",null,null],[17,"BGFX_RESET_HMD_RECENTER","","",null,null],[17,"BGFX_RESET_FLUSH_AFTER_RENDER","","",null,null],[17,"BGFX_RESET_FLIP_AFTER_RENDER","","",null,null],[17,"BGFX_RESET_SRGB_BACKBUFFER","","",null,null],[17,"BGFX_RESET_HIDPI","","",null,null],[17,"BGFX_BUFFER_NONE","","",null,null],[17,"BGFX_BUFFER_COMPUTE_FORMAT_8X1","","",null,null],[17,"BGFX_BUFFER_COMPUTE_FORMAT_8X2","","",null,null],[17,"BGFX_BUFFER_COMPUTE_FORMAT_8X4","","",null,null],[17,"BGFX_BUFFER_COMPUTE_FORMAT_16X1","","",null,null],[17,"BGFX_BUFFER_COMPUTE_FORMAT_16X2","","",null,null],[17,"BGFX_BUFFER_COMPUTE_FORMAT_16X4","","",null,null],[17,"BGFX_BUFFER_COMPUTE_FORMAT_32X1","","",null,null],[17,"BGFX_BUFFER_COMPUTE_FORMAT_32X2","","",null,null],[17,"BGFX_BUFFER_COMPUTE_FORMAT_32X4","","",null,null],[17,"BGFX_BUFFER_COMPUTE_FORMAT_SHIFT","","",null,null],[17,"BGFX_BUFFER_COMPUTE_FORMAT_MASK","","",null,null],[17,"BGFX_BUFFER_COMPUTE_TYPE_UINT","","",null,null],[17,"BGFX_BUFFER_COMPUTE_TYPE_INT","","",null,null],[17,"BGFX_BUFFER_COMPUTE_TYPE_FLOAT","","",null,null],[17,"BGFX_BUFFER_COMPUTE_TYPE_SHIFT","","",null,null],[17,"BGFX_BUFFER_COMPUTE_TYPE_MASK","","",null,null],[17,"BGFX_BUFFER_COMPUTE_READ","","",null,null],[17,"BGFX_BUFFER_COMPUTE_WRITE","","",null,null],[17,"BGFX_BUFFER_DRAW_INDIRECT","","",null,null],[17,"BGFX_BUFFER_ALLOW_RESIZE","","",null,null],[17,"BGFX_BUFFER_INDEX32","","",null,null],[17,"BGFX_BUFFER_COMPUTE_READ_WRITE","","",null,null],[17,"BGFX_STATE_RGB_WRITE","","",null,null],[17,"BGFX_STATE_ALPHA_WRITE","","",null,null],[17,"BGFX_STATE_DEPTH_WRITE","","",null,null],[17,"BGFX_STATE_DEPTH_TEST_LESS","","",null,null],[17,"BGFX_STATE_DEPTH_TEST_LEQUAL","","",null,null],[17,"BGFX_STATE_DEPTH_TEST_EQUAL","","",null,null],[17,"BGFX_STATE_DEPTH_TEST_GEQUAL","","",null,null],[17,"BGFX_STATE_DEPTH_TEST_GREATER","","",null,null],[17,"BGFX_STATE_DEPTH_TEST_NOTEQUAL","","",null,null],[17,"BGFX_STATE_DEPTH_TEST_NEVER","","",null,null],[17,"BGFX_STATE_DEPTH_TEST_ALWAYS","","",null,null],[17,"BGFX_STATE_DEPTH_TEST_SHIFT","","",null,null],[17,"BGFX_STATE_DEPTH_TEST_MASK","","",null,null],[17,"BGFX_STATE_BLEND_ZERO","","",null,null],[17,"BGFX_STATE_BLEND_ONE","","",null,null],[17,"BGFX_STATE_BLEND_SRC_COLOR","","",null,null],[17,"BGFX_STATE_BLEND_INV_SRC_COLOR","","",null,null],[17,"BGFX_STATE_BLEND_SRC_ALPHA","","",null,null],[17,"BGFX_STATE_BLEND_INV_SRC_ALPHA","","",null,null],[17,"BGFX_STATE_BLEND_DST_ALPHA","","",null,null],[17,"BGFX_STATE_BLEND_INV_DST_ALPHA","","",null,null],[17,"BGFX_STATE_BLEND_DST_COLOR","","",null,null],[17,"BGFX_STATE_BLEND_INV_DST_COLOR","","",null,null],[17,"BGFX_STATE_BLEND_SRC_ALPHA_SAT","","",null,null],[17,"BGFX_STATE_BLEND_FACTOR","","",null,null],[17,"BGFX_STATE_BLEND_INV_FACTOR","","",null,null],[17,"BGFX_STATE_BLEND_SHIFT","","",null,null],[17,"BGFX_STATE_BLEND_MASK","","",null,null],[17,"BGFX_STATE_BLEND_EQUATION_ADD","","",null,null],[17,"BGFX_STATE_BLEND_EQUATION_SUB","","",null,null],[17,"BGFX_STATE_BLEND_EQUATION_REVSUB","","",null,null],[17,"BGFX_STATE_BLEND_EQUATION_MIN","","",null,null],[17,"BGFX_STATE_BLEND_EQUATION_MAX","","",null,null],[17,"BGFX_STATE_BLEND_EQUATION_SHIFT","","",null,null],[17,"BGFX_STATE_BLEND_EQUATION_MASK","","",null,null],[17,"BGFX_STATE_BLEND_INDEPENDENT","","",null,null],[17,"BGFX_STATE_CULL_CW","","",null,null],[17,"BGFX_STATE_CULL_CCW","","",null,null],[17,"BGFX_STATE_CULL_SHIFT","","",null,null],[17,"BGFX_STATE_CULL_MASK","","",null,null],[17,"BGFX_STATE_ALPHA_REF_SHIFT","","",null,null],[17,"BGFX_STATE_ALPHA_REF_MASK","","",null,null],[17,"BGFX_STATE_PT_TRISTRIP","","",null,null],[17,"BGFX_STATE_PT_LINES","","",null,null],[17,"BGFX_STATE_PT_LINESTRIP","","",null,null],[17,"BGFX_STATE_PT_POINTS","","",null,null],[17,"BGFX_STATE_PT_SHIFT","","",null,null],[17,"BGFX_STATE_PT_MASK","","",null,null],[17,"BGFX_STATE_POINT_SIZE_SHIFT","","",null,null],[17,"BGFX_STATE_POINT_SIZE_MASK","","",null,null],[17,"BGFX_STATE_MSAA","","",null,null],[17,"BGFX_STATE_RESERVED_MASK","","",null,null],[17,"BGFX_STATE_NONE","","",null,null],[17,"BGFX_STATE_MASK","","",null,null],[17,"BGFX_STATE_DEFAULT","","",null,null],[17,"BGFX_STATE_BLEND_ADD","","",null,null],[17,"BGFX_STATE_BLEND_ALPHA","","",null,null],[17,"BGFX_STATE_BLEND_DARKEN","","",null,null],[17,"BGFX_STATE_BLEND_LIGHTEN","","",null,null],[17,"BGFX_STATE_BLEND_MULTIPLY","","",null,null],[17,"BGFX_STATE_BLEND_NORMAL","","",null,null],[17,"BGFX_STATE_BLEND_SCREEN","","",null,null],[17,"BGFX_STATE_BLEND_LINEAR_BURN","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"struct_bgfx_indirect_buffer_handle"}],"output":{"name":"self"}}],[11,"default","","",0,{"inputs":[{"name":"struct_bgfx_indirect_buffer_handle"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"struct_bgfx_dynamic_index_buffer_handle"}],"output":{"name":"self"}}],[11,"default","","",1,{"inputs":[{"name":"struct_bgfx_dynamic_index_buffer_handle"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"struct_bgfx_dynamic_vertex_buffer_handle"}],"output":{"name":"self"}}],[11,"default","","",2,{"inputs":[{"name":"struct_bgfx_dynamic_vertex_buffer_handle"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"struct_bgfx_frame_buffer_handle"}],"output":{"name":"self"}}],[11,"default","","",3,{"inputs":[{"name":"struct_bgfx_frame_buffer_handle"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"struct_bgfx_index_buffer_handle"}],"output":{"name":"self"}}],[11,"default","","",4,{"inputs":[{"name":"struct_bgfx_index_buffer_handle"}],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"struct_bgfx_occlusion_query_handle"}],"output":{"name":"self"}}],[11,"default","","",5,{"inputs":[{"name":"struct_bgfx_occlusion_query_handle"}],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"struct_bgfx_program_handle"}],"output":{"name":"self"}}],[11,"default","","",6,{"inputs":[{"name":"struct_bgfx_program_handle"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"struct_bgfx_shader_handle"}],"output":{"name":"self"}}],[11,"default","","",7,{"inputs":[{"name":"struct_bgfx_shader_handle"}],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"struct_bgfx_texture_handle"}],"output":{"name":"self"}}],[11,"default","","",8,{"inputs":[{"name":"struct_bgfx_texture_handle"}],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"struct_bgfx_uniform_handle"}],"output":{"name":"self"}}],[11,"default","","",9,{"inputs":[{"name":"struct_bgfx_uniform_handle"}],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"struct_bgfx_vertex_buffer_handle"}],"output":{"name":"self"}}],[11,"default","","",10,{"inputs":[{"name":"struct_bgfx_vertex_buffer_handle"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"struct_bgfx_vertex_decl_handle"}],"output":{"name":"self"}}],[11,"default","","",11,{"inputs":[{"name":"struct_bgfx_vertex_decl_handle"}],"output":{"name":"self"}}],[11,"clone","","",12,{"inputs":[{"name":"struct_bgfx_memory"}],"output":{"name":"self"}}],[11,"default","","",12,{"inputs":[{"name":"struct_bgfx_memory"}],"output":{"name":"self"}}],[11,"clone","","",13,{"inputs":[{"name":"struct_bgfx_transform"}],"output":{"name":"self"}}],[11,"default","","",13,{"inputs":[{"name":"struct_bgfx_transform"}],"output":{"name":"self"}}],[11,"clone","","",14,{"inputs":[{"name":"struct_bgfx_hmd_eye"}],"output":{"name":"self"}}],[11,"default","","",14,{"inputs":[{"name":"struct_bgfx_hmd_eye"}],"output":{"name":"self"}}],[11,"clone","","",15,{"inputs":[{"name":"struct_bgfx_hmd"}],"output":{"name":"self"}}],[11,"default","","",15,{"inputs":[{"name":"struct_bgfx_hmd"}],"output":{"name":"self"}}],[11,"clone","","",16,{"inputs":[{"name":"struct_bgfx_stats"}],"output":{"name":"self"}}],[11,"default","","",16,{"inputs":[{"name":"struct_bgfx_stats"}],"output":{"name":"self"}}],[11,"clone","","",17,{"inputs":[{"name":"struct_bgfx_vertex_decl"}],"output":{"name":"self"}}],[11,"default","","",17,{"inputs":[{"name":"struct_bgfx_vertex_decl"}],"output":{"name":"self"}}],[11,"clone","","",18,{"inputs":[{"name":"struct_bgfx_transient_index_buffer"}],"output":{"name":"self"}}],[11,"default","","",18,{"inputs":[{"name":"struct_bgfx_transient_index_buffer"}],"output":{"name":"self"}}],[11,"clone","","",19,{"inputs":[{"name":"struct_bgfx_transient_vertex_buffer"}],"output":{"name":"self"}}],[11,"default","","",19,{"inputs":[{"name":"struct_bgfx_transient_vertex_buffer"}],"output":{"name":"self"}}],[11,"clone","","",20,{"inputs":[{"name":"struct_bgfx_instance_data_buffer"}],"output":{"name":"self"}}],[11,"default","","",20,{"inputs":[{"name":"struct_bgfx_instance_data_buffer"}],"output":{"name":"self"}}],[11,"clone","","",21,{"inputs":[{"name":"struct_bgfx_texture_info"}],"output":{"name":"self"}}],[11,"default","","",21,{"inputs":[{"name":"struct_bgfx_texture_info"}],"output":{"name":"self"}}],[11,"clone","","",22,{"inputs":[{"name":"struct_bgfx_caps_gpu"}],"output":{"name":"self"}}],[11,"default","","",22,{"inputs":[{"name":"struct_bgfx_caps_gpu"}],"output":{"name":"self"}}],[11,"clone","","",23,{"inputs":[{"name":"struct_bgfx_caps"}],"output":{"name":"self"}}],[11,"default","","",23,{"inputs":[{"name":"struct_bgfx_caps"}],"output":{"name":"self"}}],[11,"clone","","",24,{"inputs":[{"name":"struct_bgfx_callback_interface"}],"output":{"name":"self"}}],[11,"default","","",24,{"inputs":[{"name":"struct_bgfx_callback_interface"}],"output":{"name":"self"}}],[11,"clone","","",25,{"inputs":[{"name":"struct_bgfx_callback_vtbl"}],"output":{"name":"self"}}],[11,"default","","",25,{"inputs":[{"name":"struct_bgfx_callback_vtbl"}],"output":{"name":"self"}}],[11,"clone","","",26,{"inputs":[{"name":"struct_bgfx_allocator_interface"}],"output":{"name":"self"}}],[11,"default","","",26,{"inputs":[{"name":"struct_bgfx_allocator_interface"}],"output":{"name":"self"}}],[11,"clone","","",27,{"inputs":[{"name":"struct_bgfx_allocator_vtbl"}],"output":{"name":"self"}}],[11,"default","","",27,{"inputs":[{"name":"struct_bgfx_allocator_vtbl"}],"output":{"name":"self"}}],[11,"clone","","",28,{"inputs":[{"name":"struct_bgfx_interface_vtbl"}],"output":{"name":"self"}}],[11,"default","","",28,{"inputs":[{"name":"struct_bgfx_interface_vtbl"}],"output":{"name":"self"}}],[11,"clone","","",29,{"inputs":[{"name":"struct_bgfx_platform_data"}],"output":{"name":"self"}}],[11,"default","","",29,{"inputs":[{"name":"struct_bgfx_platform_data"}],"output":{"name":"self"}}],[14,"BGFX_STATE_ALPHA_REF!","","",null,null],[14,"BGFX_STATE_POINT_SIZE!","","",null,null],[14,"BGFX_STATE_BLEND_FUNC_SEPARATE!","","",null,null],[14,"BGFX_STATE_BLEND_EQUATION_SEPARATE!","","",null,null],[14,"BGFX_STATE_BLEND_FUNC!","","",null,null],[14,"BGFX_STATE_BLEND_EQUATION!","","",null,null],[14,"BGFX_STATE_BLEND_FUNC_RT_x!","","",null,null],[14,"BGFX_STATE_BLEND_FUNC_RT_xE!","","",null,null],[14,"BGFX_STATE_BLEND_FUNC_RT_1!","","",null,null],[14,"BGFX_STATE_BLEND_FUNC_RT_2!","","",null,null],[14,"BGFX_STATE_BLEND_FUNC_RT_3!","","",null,null],[14,"BGFX_STATE_BLEND_FUNC_RT_1E!","","",null,null],[14,"BGFX_STATE_BLEND_FUNC_RT_2E!","","",null,null],[14,"BGFX_STATE_BLEND_FUNC_RT_3E!","","",null,null]],"paths":[[3,"Struct_bgfx_indirect_buffer_handle"],[3,"Struct_bgfx_dynamic_index_buffer_handle"],[3,"Struct_bgfx_dynamic_vertex_buffer_handle"],[3,"Struct_bgfx_frame_buffer_handle"],[3,"Struct_bgfx_index_buffer_handle"],[3,"Struct_bgfx_occlusion_query_handle"],[3,"Struct_bgfx_program_handle"],[3,"Struct_bgfx_shader_handle"],[3,"Struct_bgfx_texture_handle"],[3,"Struct_bgfx_uniform_handle"],[3,"Struct_bgfx_vertex_buffer_handle"],[3,"Struct_bgfx_vertex_decl_handle"],[3,"Struct_bgfx_memory"],[3,"Struct_bgfx_transform"],[3,"Struct_bgfx_hmd_eye"],[3,"Struct_bgfx_hmd"],[3,"Struct_bgfx_stats"],[3,"Struct_bgfx_vertex_decl"],[3,"Struct_bgfx_transient_index_buffer"],[3,"Struct_bgfx_transient_vertex_buffer"],[3,"Struct_bgfx_instance_data_buffer"],[3,"Struct_bgfx_texture_info"],[3,"Struct_bgfx_caps_gpu"],[3,"Struct_bgfx_caps"],[3,"Struct_bgfx_callback_interface"],[3,"Struct_bgfx_callback_vtbl"],[3,"Struct_bgfx_allocator_interface"],[3,"Struct_bgfx_allocator_vtbl"],[3,"Struct_bgfx_interface_vtbl"],[3,"Struct_bgfx_platform_data"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Crate docs",null,null],[3,"stat","","",null,null],[12,"st_dev","","",0,null],[12,"st_ino","","",0,null],[12,"st_mode","","",0,null],[12,"st_nlink","","",0,null],[12,"st_uid","","",0,null],[12,"st_gid","","",0,null],[12,"st_rdev","","",0,null],[12,"st_size","","",0,null],[12,"st_atime","","",0,null],[12,"st_mtime","","",0,null],[12,"st_ctime","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"timezone","","",null,null],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"chmod","","",null,null],[5,"wchmod","","",null,null],[5,"mkdir","","",null,null],[5,"wrmdir","","",null,null],[5,"fstat","","",null,null],[5,"stat","","",null,null],[5,"wstat","","",null,null],[5,"wutime","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"wopen","","",null,null],[5,"creat","","",null,null],[5,"access","","",null,null],[5,"chdir","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"execvpe","","",null,null],[5,"getcwd","","",null,null],[5,"getpid","","",null,null],[5,"isatty","","",null,null],[5,"lseek","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"unlink","","",null,null],[5,"write","","",null,null],[5,"commit","","",null,null],[5,"get_osfhandle","","",null,null],[5,"open_osfhandle","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",4,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",4,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",4,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",4,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",4,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",4,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",4,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",4,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",4,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",4,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",4,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",4,null],[11,"cloned","","Maps an `Option<&T>` to an `Option<T>` by cloning the contents of the\noption.",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",4,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"fmt","","",5,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"eq","core::num::flt2dec::decoder","",6,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",7,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec","",8,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",8,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",8,null],[11,"clone","","",9,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",9,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",9,null],[11,"fmt","","",10,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",11,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",11,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",12,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",13,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",13,null],[11,"eq","","",14,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",15,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",15,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",16,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",15,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum","Makes a bignum from one digit.",17,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",17,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",17,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",17,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",17,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",17,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",17,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",17,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",17,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",17,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",17,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",17,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",17,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",17,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",17,null],[11,"eq","","",17,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",17,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",17,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",17,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::bignum::tests","Makes a bignum from one digit.",18,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",18,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",18,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",18,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",18,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",18,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",18,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",18,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",18,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",18,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",18,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",18,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",18,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",18,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",18,null],[11,"eq","","",18,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",18,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",18,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",18,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num::diy_float","",19,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",19,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",19,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",19,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num","",20,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",21,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",21,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",22,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",23,null],[11,"fmt","","",23,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",23,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",23,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",23,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",23,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",23,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",23,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",23,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",23,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",23,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",24,null],[11,"get","","Dereferences the content.",24,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",24,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",24,null],[11,"fmt","","",24,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",25,null],[11,"clone","","",25,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",25,null],[11,"fmt","","",25,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",26,null],[11,"eq","","",26,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",26,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",26,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",27,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",27,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",28,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",29,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",30,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",31,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",31,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",31,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",32,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",32,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",32,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",32,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",32,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",32,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",32,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",32,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",33,null],[11,"fmt","","",33,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",33,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",34,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",35,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",36,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",37,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",38,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",34,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",34,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",34,null],[11,"swap","","Stores a value into the bool, returning the old value.",34,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",34,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",34,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",34,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",34,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",34,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",35,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",35,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",35,null],[11,"swap","","Stores a value into the isize, returning the old value.",35,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",35,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",35,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",35,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",35,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",35,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",35,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",36,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",36,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",36,null],[11,"swap","","Stores a value into the usize, returning the old value.",36,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",36,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",36,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",36,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",36,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",36,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",36,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",37,null],[11,"load","","Loads a value from the pointer.",37,null],[11,"store","","Stores a value into the pointer.",37,null],[11,"swap","","Stores a value into the pointer, returning the old value.",37,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",37,null],[11,"fmt","","",36,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",35,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",34,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",39,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",39,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",39,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",39,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",39,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",39,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",39,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",41,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",41,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",41,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",41,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",41,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",41,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",41,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",41,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",41,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",42,null],[11,"clone","","",42,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",43,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",43,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",43,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",43,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",44,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",44,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",45,null],[11,"deref","","",44,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",44,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",46,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",46,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",46,null],[11,"clone","core::char","",47,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",48,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",47,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"clone","","",49,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",50,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",49,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","core::iter","",51,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",51,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"next_back","","",51,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",52,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",52,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"next_back","","",52,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",53,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",53,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"clone","","",54,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",55,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",54,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",54,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",54,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",54,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",56,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",57,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",58,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",58,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",59,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",59,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",60,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",60,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"nth","","",60,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",60,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",60,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",61,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",61,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",61,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",61,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",61,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"peek","","Returns a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",61,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether peekable iterator is empty or not.",61,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",62,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",62,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"clone","","",63,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",63,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"clone","","",64,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",64,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",64,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",64,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",64,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"clone","","",65,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",65,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",65,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"clone","","",66,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",66,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"clone","","",67,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",67,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"next_back","","",67,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",68,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",68,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",68,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",68,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",69,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",69,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",70,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",29,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",28,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",70,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"clone","","",71,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",71,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"next_back","","",71,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next","core::ops","",28,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",28,null],[11,"next_back","","",28,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",29,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",72,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",72,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",73,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",73,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",73,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",73,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",74,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",74,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",74,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",4,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",75,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",75,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next_back","","",75,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",76,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",76,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",77,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",78,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",78,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",4,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",79,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",80,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",81,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",81,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",81,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",81,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",81,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",81,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",81,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",81,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",81,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",81,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",81,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",81,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",81,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",81,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",81,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",81,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",81,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",81,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",81,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",81,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",81,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",81,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",81,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",81,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",81,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",81,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",81,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",81,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",82,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",83,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",84,null],[11,"next_back","","",84,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",81,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",85,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",85,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",86,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",86,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",87,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",87,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",88,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",89,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",90,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",91,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",92,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",93,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",94,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",89,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",90,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",91,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",92,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",85,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",86,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",87,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",88,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",93,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",94,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",89,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",90,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",91,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",92,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",85,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",86,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",87,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",88,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",93,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",94,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",89,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",90,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",91,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",92,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",85,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",86,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",87,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",88,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",93,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",94,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",93,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",94,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",89,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",90,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",91,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",92,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",85,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",86,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",87,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",88,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",89,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",90,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",91,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",92,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",85,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",86,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",87,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",88,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",89,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",90,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",91,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",92,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",85,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",86,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",87,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",88,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",89,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",90,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",91,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",92,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",85,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",86,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",87,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",88,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",89,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",90,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",91,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",92,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",85,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",86,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",87,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",88,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",95,null],[11,"next","","",95,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",95,null],[11,"count","","",95,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",95,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",95,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",95,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",95,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",96,null],[11,"next","","",96,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",96,null],[11,"count","","",96,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",96,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",96,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",96,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",97,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",97,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",97,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",98,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",98,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",99,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"next","","",100,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"next","","",101,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"next","","",102,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next","","",103,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"clone","","",104,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",104,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"count","","",104,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",104,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",104,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",104,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",105,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"count","","",105,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",105,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",105,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",105,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",106,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"count","","",106,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",106,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",106,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",106,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",107,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",107,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",107,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",108,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",109,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",108,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",108,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",108,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",110,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",110,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",110,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",110,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",110,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",110,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",110,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",110,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",111,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",111,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",111,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",111,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",111,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",111,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",111,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",112,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",112,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",112,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",112,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",112,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",112,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",112,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",113,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",113,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",114,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",114,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",115,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",115,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",113,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",113,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",113,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",113,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",113,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",116,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",117,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",117,null],[11,"matching","","",117,null],[11,"use_early_reject","","",118,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",118,null],[11,"matching","","",118,null],[11,"eq","core::str","",119,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",119,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",119,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",119,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",119,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",120,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",120,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",120,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",121,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",121,null],[11,"next_back","","",121,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",121,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",122,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",122,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",122,null],[11,"next_back","","",122,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",122,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",123,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",123,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",123,null],[11,"count","","",123,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",123,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",123,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",123,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",123,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",124,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",125,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",125,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",126,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",126,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",125,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",126,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",127,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",127,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",128,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",128,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",127,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",128,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",129,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",130,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",131,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",132,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",133,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",133,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",134,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",133,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",134,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",135,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",136,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",136,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",137,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",137,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",136,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",137,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",138,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",138,null],[11,"next_back","","",138,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",139,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",140,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",140,null],[11,"call_mut","","",140,null],[11,"call_once","","",140,null],[11,"next","","",139,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",139,null],[11,"next_back","","",139,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",141,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",142,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",142,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",142,null],[11,"finish","","",142,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",142,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",142,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",143,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",143,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",143,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",144,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",144,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",144,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",145,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",145,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",145,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",146,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",146,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",146,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",147,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",147,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",147,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",148,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",149,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",150,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",151,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",151,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",152,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",152,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",152,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",153,null],[11,"entry","","Adds a new entry to the set output.",154,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",154,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",154,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",155,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",155,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",155,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",156,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",156,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",156,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",157,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",158,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",159,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",159,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",159,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",160,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",161,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",162,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",162,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",163,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",164,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",165,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",165,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",165,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",166,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",166,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",166,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",166,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",166,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",166,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",166,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",166,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",166,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",166,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",166,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",166,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",166,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",166,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",166,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",166,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",166,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",166,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",166,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",166,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",166,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",162,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",26,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",39,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",41,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",43,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",167,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",167,null],[11,"clone","libc","",0,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",1,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"c_char","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"wchar_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"off_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"time64_t","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_TEXT","","",null,null],[17,"O_BINARY","","",null,null],[17,"O_NOINHERIT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null]],"paths":[[3,"stat"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[4,"Option"],[3,"Wrapping"],[3,"Decoded"],[4,"FullDecoded"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[3,"Big32x40"],[3,"Big8x3"],[3,"Fp"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"]]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator.",null,null],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
